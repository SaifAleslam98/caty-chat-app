#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-auth:server');
var http = require('http');
const User = require('../models/userModel');
const Chat = require('../models/chatModel');
const FriendRequest = require('../models/friendRequest');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var io = require('socket.io')(server);
var usp = io.of('/user-namespace');
usp.on('connection', async (socket) => {
  console.log('some one connect');
  var userId = socket.handshake.auth.token;
  await User.findByIdAndUpdate({ _id: userId }, { $set: { is_online: true } });
  const friendRequestList = await FriendRequest.find({receiver_id: userId}).populate('sender_id');
  //user broadcast online status
  socket.broadcast.emit('getOnlineUser', { user_id: userId });

  socket.on('disconnect', async () => {
    console.log('disconnect')
    await User.findByIdAndUpdate({ _id: userId }, { $set: { is_online: false } });
    //user broadcast offline status
    socket.broadcast.emit('getOfflineUser', { user_id: userId });
  });
  socket.broadcast.emit('loadFriendRequest',friendRequestList)
  //chat impelementation
  socket.on('newChat', function (data) {
    socket.broadcast.emit('loadNewChat', data)
  });

  //load old chats
  socket.on('existsChat', async function (data) {
    var chats = await Chat.find({
      $or: [
        { sender_id: data.sender_id, receiver_id: data.receiver_id },
        { sender_id: data.receiver_id, receiver_id: data.sender_id }
      ]
    });
    socket.emit('loadChats', { chats: chats });
  });

  //delete chat
  socket.on('chatDeleted', function (id) {
    socket.broadcast.emit('chatMessageDeleted', id);
  });
});